// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module InitMem(	// @[src/main/scala/npc/dev/Mem.scala:28:7]
  input         clock,	// @[src/main/scala/npc/dev/Mem.scala:28:7]
                io_ren,	// @[src/main/scala/npc/dev/Mem.scala:30:17]
  input  [31:0] io_raddr,	// @[src/main/scala/npc/dev/Mem.scala:30:17]
  output [31:0] io_rdata,	// @[src/main/scala/npc/dev/Mem.scala:30:17]
  input         io_wen,	// @[src/main/scala/npc/dev/Mem.scala:30:17]
  input  [31:0] io_waddr,	// @[src/main/scala/npc/dev/Mem.scala:30:17]
                io_wdata,	// @[src/main/scala/npc/dev/Mem.scala:30:17]
  input  [3:0]  io_wmask	// @[src/main/scala/npc/dev/Mem.scala:30:17]
);

  wire [31:0] _mem_ext_R0_data;	// @[src/main/scala/npc/dev/Mem.scala:31:18]
  mem_4194304x32 mem_ext (	// @[src/main/scala/npc/dev/Mem.scala:31:18]
    .R0_addr (io_raddr[23:2]),	// @[src/main/scala/npc/dev/Mem.scala:33:30]
    .R0_en   (1'h1),	// @[src/main/scala/npc/dev/Mem.scala:28:7]
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_waddr[23:2]),	// @[src/main/scala/npc/dev/Mem.scala:41:14]
    .W0_en   (io_wen),
    .W0_clk  (clock),
    .W0_data (io_wdata),
    .W0_mask (io_wmask)
  );
  assign io_rdata = io_ren ? _mem_ext_R0_data : 32'h0;	// @[src/main/scala/npc/dev/Mem.scala:28:7, :31:18, :33:18]
endmodule

