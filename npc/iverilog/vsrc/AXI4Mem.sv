// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module AXI4Mem(	// @[src/main/scala/npc/dev/Mem.scala:47:7]
  input         clock,	// @[src/main/scala/npc/dev/Mem.scala:47:7]
                reset,	// @[src/main/scala/npc/dev/Mem.scala:47:7]
  output        io_awready,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  input         io_awvalid,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  input  [31:0] io_awaddr,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  output        io_wready,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  input         io_wvalid,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  input  [31:0] io_wdata,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  input  [3:0]  io_wstrb,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  input         io_bready,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  output        io_bvalid,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
                io_arready,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  input         io_arvalid,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  input  [31:0] io_araddr,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  input         io_rready,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  output        io_rvalid,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  output [31:0] io_rdata,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  input  [7:0]  io_arlen,	// @[src/main/scala/npc/dev/Mem.scala:49:16]
  output        io_rlast	// @[src/main/scala/npc/dev/Mem.scala:49:16]
);

  reg         writeState;	// @[src/main/scala/npc/dev/Mem.scala:60:28]
  wire        awfire = io_awvalid & ~writeState;	// @[src/main/scala/npc/dev/Mem.scala:51:27, :60:28, :61:32]
  wire        wfire = io_wvalid & ~writeState;	// @[src/main/scala/npc/dev/Mem.scala:52:26, :60:28, :61:32]
  reg         readState;	// @[src/main/scala/npc/dev/Mem.scala:64:28]
  reg  [7:0]  arlen;	// @[src/main/scala/npc/dev/Mem.scala:99:32]
  reg  [31:0] araddr;	// @[src/main/scala/npc/dev/Mem.scala:100:32]
  reg  [7:0]  readCount;	// @[src/main/scala/npc/dev/Mem.scala:101:30]
  wire [7:0]  _nextReadCount_T = readCount + 8'h1;	// @[src/main/scala/npc/dev/Mem.scala:99:42, :101:30, :102:33]
  reg         delayCount;	// @[src/main/scala/npc/dev/Mem.scala:128:27]
  wire        rvalid = ~delayCount & readState;	// @[src/main/scala/npc/dev/Mem.scala:64:28, :128:27, :129:31, :138:36]
  wire        rlast = readState & ~delayCount & _nextReadCount_T == arlen;	// @[src/main/scala/npc/dev/Mem.scala:64:28, :99:32, :102:33, :128:27, :129:31, :139:{51,68}]
  wire        rfire = rvalid & io_rready;	// @[src/main/scala/npc/dev/Mem.scala:55:26, :138:36]
  always @(posedge clock) begin	// @[src/main/scala/npc/dev/Mem.scala:47:7]
    if (reset) begin	// @[src/main/scala/npc/dev/Mem.scala:47:7]
      writeState <= 1'h0;	// @[src/main/scala/npc/dev/Mem.scala:47:7, :60:28]
      readState <= 1'h0;	// @[src/main/scala/npc/dev/Mem.scala:47:7, :64:28]
      readCount <= 8'h0;	// @[src/main/scala/npc/dev/Mem.scala:101:30]
      delayCount <= 1'h0;	// @[src/main/scala/npc/dev/Mem.scala:47:7, :128:27]
    end
    else begin	// @[src/main/scala/npc/dev/Mem.scala:47:7]
      if (writeState)	// @[src/main/scala/npc/dev/Mem.scala:60:28]
        writeState <= ~(writeState & io_bready);	// @[src/main/scala/npc/dev/Mem.scala:53:26, :60:28, :62:32, :71:24]
      else	// @[src/main/scala/npc/dev/Mem.scala:60:28]
        writeState <= awfire & wfire;	// @[src/main/scala/npc/dev/Mem.scala:51:27, :52:26, :60:28, :70:32]
      if (readState)	// @[src/main/scala/npc/dev/Mem.scala:64:28]
        readState <= ~(rfire & rlast);	// @[src/main/scala/npc/dev/Mem.scala:55:26, :60:28, :62:32, :64:28, :78:{24,31}, :139:51]
      else	// @[src/main/scala/npc/dev/Mem.scala:64:28]
        readState <= io_arvalid & ~readState;	// @[src/main/scala/npc/dev/Mem.scala:54:27, :64:28, :65:31]
      if (rlast)	// @[src/main/scala/npc/dev/Mem.scala:139:51]
        readCount <= 8'h0;	// @[src/main/scala/npc/dev/Mem.scala:101:30]
      else if (rfire)	// @[src/main/scala/npc/dev/Mem.scala:55:26]
        readCount <= _nextReadCount_T;	// @[src/main/scala/npc/dev/Mem.scala:101:30, :102:33]
      delayCount <= readState & (readState & ~rvalid ? delayCount - 1'h1 : delayCount);	// @[src/main/scala/chisel3/util/Mux.scala:126:16, src/main/scala/npc/dev/Mem.scala:64:28, :128:27, :134:{20,23,50}, :138:36]
    end
    if (readState) begin	// @[src/main/scala/npc/dev/Mem.scala:64:28]
    end
    else begin	// @[src/main/scala/npc/dev/Mem.scala:64:28]
      arlen <= io_arlen + 8'h1;	// @[src/main/scala/npc/dev/Mem.scala:99:{32,42}]
      araddr <= io_araddr;	// @[src/main/scala/npc/dev/Mem.scala:100:32]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/scala/npc/dev/Mem.scala:47:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/scala/npc/dev/Mem.scala:47:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/scala/npc/dev/Mem.scala:47:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];	// @[src/main/scala/npc/dev/Mem.scala:47:7]
    initial begin	// @[src/main/scala/npc/dev/Mem.scala:47:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/scala/npc/dev/Mem.scala:47:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/scala/npc/dev/Mem.scala:47:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/scala/npc/dev/Mem.scala:47:7]
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// @[src/main/scala/npc/dev/Mem.scala:47:7]
        end	// @[src/main/scala/npc/dev/Mem.scala:47:7]
        writeState = _RANDOM[1'h0][0];	// @[src/main/scala/npc/dev/Mem.scala:47:7, :60:28]
        readState = _RANDOM[1'h0][1];	// @[src/main/scala/npc/dev/Mem.scala:47:7, :60:28, :64:28]
        arlen = _RANDOM[1'h0][9:2];	// @[src/main/scala/npc/dev/Mem.scala:47:7, :60:28, :99:32]
        araddr = {_RANDOM[1'h0][31:10], _RANDOM[1'h1][9:0]};	// @[src/main/scala/npc/dev/Mem.scala:47:7, :60:28, :100:32]
        readCount = _RANDOM[1'h1][17:10];	// @[src/main/scala/npc/dev/Mem.scala:47:7, :100:32, :101:30]
        delayCount = _RANDOM[1'h1][18];	// @[src/main/scala/npc/dev/Mem.scala:47:7, :100:32, :128:27]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/scala/npc/dev/Mem.scala:47:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/scala/npc/dev/Mem.scala:47:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  InitMem readData_Mem (	// @[src/main/scala/npc/dev/Mem.scala:115:21]
    .clock    (clock),
    .io_ren   (readState),	// @[src/main/scala/npc/dev/Mem.scala:64:28]
    .io_raddr ({1'h0, {1'h0, araddr[31:2]} + {23'h0, readCount}}),	// @[src/main/scala/npc/dev/Mem.scala:47:7, :100:32, :101:30, :116:28, :120:{29,37}]
    .io_rdata (io_rdata),
    .io_wen   (~writeState & awfire & wfire),	// @[src/main/scala/npc/dev/Mem.scala:51:27, :52:26, :60:28, :61:32, :119:43]
    .io_waddr ({2'h0, io_awaddr[31:2]}),	// @[src/main/scala/npc/dev/Mem.scala:47:7, :116:28]
    .io_wdata (io_wdata),
    .io_wmask (io_wstrb)
  );
  assign io_awready = ~writeState;	// @[src/main/scala/npc/dev/Mem.scala:47:7, :60:28, :61:32]
  assign io_wready = ~writeState;	// @[src/main/scala/npc/dev/Mem.scala:47:7, :60:28, :61:32]
  assign io_bvalid = writeState;	// @[src/main/scala/npc/dev/Mem.scala:47:7, :60:28]
  assign io_arready = ~readState;	// @[src/main/scala/npc/dev/Mem.scala:47:7, :64:28, :65:31]
  assign io_rvalid = rvalid;	// @[src/main/scala/npc/dev/Mem.scala:47:7, :138:36]
  assign io_rlast = rlast;	// @[src/main/scala/npc/dev/Mem.scala:47:7, :139:51]
endmodule

