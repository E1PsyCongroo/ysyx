// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Uart(	// @[src/main/scala/npc/dev/Uart.scala:8:7]
  input         clock,	// @[src/main/scala/npc/dev/Uart.scala:8:7]
                reset,	// @[src/main/scala/npc/dev/Uart.scala:8:7]
  output        io_awready,	// @[src/main/scala/npc/dev/Uart.scala:13:14]
  input         io_awvalid,	// @[src/main/scala/npc/dev/Uart.scala:13:14]
  input  [31:0] io_awaddr,	// @[src/main/scala/npc/dev/Uart.scala:13:14]
  output        io_wready,	// @[src/main/scala/npc/dev/Uart.scala:13:14]
  input         io_wvalid,	// @[src/main/scala/npc/dev/Uart.scala:13:14]
  input  [31:0] io_wdata,	// @[src/main/scala/npc/dev/Uart.scala:13:14]
  input  [3:0]  io_wstrb,	// @[src/main/scala/npc/dev/Uart.scala:13:14]
  input         io_bready,	// @[src/main/scala/npc/dev/Uart.scala:13:14]
  output        io_bvalid,	// @[src/main/scala/npc/dev/Uart.scala:13:14]
  output [1:0]  io_bresp,	// @[src/main/scala/npc/dev/Uart.scala:13:14]
  output        io_arready,	// @[src/main/scala/npc/dev/Uart.scala:13:14]
  input         io_arvalid,	// @[src/main/scala/npc/dev/Uart.scala:13:14]
  input  [31:0] io_araddr,	// @[src/main/scala/npc/dev/Uart.scala:13:14]
  input         io_rready,	// @[src/main/scala/npc/dev/Uart.scala:13:14]
  output        io_rvalid	// @[src/main/scala/npc/dev/Uart.scala:13:14]
);

  wire        wready;	// @[src/main/scala/npc/dev/Uart.scala:57:38]
  wire        awready;	// @[src/main/scala/npc/dev/Uart.scala:50:45]
  reg  [2:0]  state;	// @[src/main/scala/npc/dev/Uart.scala:24:28]
  wire        awfire = io_awvalid & awready;	// @[src/main/scala/npc/dev/Uart.scala:15:27, :50:45]
  wire        wfire = io_wvalid & wready;	// @[src/main/scala/npc/dev/Uart.scala:16:26, :57:38]
  wire        arfire = io_arvalid & ~(|state);	// @[src/main/scala/npc/dev/Uart.scala:18:27, :24:28, :25:27]
  wire        bvalid = state == 3'h3;	// @[src/main/scala/npc/dev/Uart.scala:24:28, :28:27]
  wire        rvalid = state == 3'h4;	// @[src/main/scala/npc/dev/Uart.scala:8:7, :24:28, :29:27]
  assign awready = ~(|state) | state == 3'h1;	// @[src/main/scala/npc/dev/Uart.scala:8:7, :24:28, :25:27, :26:27, :50:45]
  reg  [31:0] writeAddr;	// @[src/main/scala/npc/dev/Uart.scala:51:35]
  assign wready = ~(|state) | state == 3'h2;	// @[src/main/scala/npc/dev/Uart.scala:24:28, :25:27, :27:27, :57:38]
  reg  [31:0] writeData;	// @[src/main/scala/npc/dev/Uart.scala:58:28]
  reg  [3:0]  writeMask;	// @[src/main/scala/npc/dev/Uart.scala:59:28]
  wire        writeValid = writeMask == 4'h1 & writeAddr == 32'h0;	// @[src/main/scala/npc/dev/Uart.scala:51:35, :59:28, :63:{31,40,54}]
  wire        _bresp_T_2 = bvalid & writeValid;	// @[src/main/scala/npc/dev/Uart.scala:28:27, :63:40, :68:16]
  reg  [31:0] readAddr;	// @[src/main/scala/npc/dev/Uart.scala:78:34]
  `ifndef SYNTHESIS	// @[src/main/scala/npc/dev/Uart.scala:20:9]
    always @(posedge clock) begin	// @[src/main/scala/npc/dev/Uart.scala:20:9]
      if (~reset & arfire & (awfire | wfire)) begin	// @[src/main/scala/npc/dev/Uart.scala:15:27, :16:26, :18:27, :20:{9,30}]
        if (`ASSERT_VERBOSE_COND_)	// @[src/main/scala/npc/dev/Uart.scala:20:9]
          $error("Assertion failed\n    at Uart.scala:20 assert(!(arfire && (awfire || wfire)))\n");	// @[src/main/scala/npc/dev/Uart.scala:20:9]
        if (`STOP_COND_)	// @[src/main/scala/npc/dev/Uart.scala:20:9]
          $fatal;	// @[src/main/scala/npc/dev/Uart.scala:20:9]
      end
      if (~reset & writeAddr != {writeAddr[31:2], 2'h0}) begin	// @[src/main/scala/npc/dev/Uart.scala:8:7, :20:9, :51:35, :52:{35,64}, :53:36, :54:9]
        if (`ASSERT_VERBOSE_COND_)	// @[src/main/scala/npc/dev/Uart.scala:54:9]
          $error("Assertion failed\n    at Uart.scala:54 assert(writeAddrAligned)\n");	// @[src/main/scala/npc/dev/Uart.scala:54:9]
        if (`STOP_COND_)	// @[src/main/scala/npc/dev/Uart.scala:54:9]
          $fatal;	// @[src/main/scala/npc/dev/Uart.scala:54:9]
      end
      if ((`PRINTF_COND_) & _bresp_T_2 & ~reset)	// @[src/main/scala/npc/dev/Uart.scala:20:9, :68:16, :73:11]
        $fwrite(32'h80000002, "%c", writeData[7:0]);	// @[src/main/scala/npc/dev/Uart.scala:58:28, :73:{11,27}]
      if (~reset & readAddr != {readAddr[31:2], 2'h0}) begin	// @[src/main/scala/npc/dev/Uart.scala:8:7, :20:9, :78:34, :79:{33,62}, :80:34, :81:9]
        if (`ASSERT_VERBOSE_COND_)	// @[src/main/scala/npc/dev/Uart.scala:81:9]
          $error("Assertion failed\n    at Uart.scala:81 assert(readAddrAligned)\n");	// @[src/main/scala/npc/dev/Uart.scala:81:9]
        if (`STOP_COND_)	// @[src/main/scala/npc/dev/Uart.scala:81:9]
          $fatal;	// @[src/main/scala/npc/dev/Uart.scala:81:9]
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin	// @[src/main/scala/npc/dev/Uart.scala:8:7]
    if (reset)	// @[src/main/scala/npc/dev/Uart.scala:8:7]
      state <= 3'h0;	// @[src/main/scala/npc/dev/Uart.scala:8:7, :24:28]
    else if (state == 3'h4)	// @[src/main/scala/npc/dev/Uart.scala:8:7, :24:28, :31:35]
      state <= {~(rvalid & io_rready), 2'h0};	// @[src/main/scala/npc/dev/Uart.scala:8:7, :19:26, :24:28, :29:27, :45:19]
    else if (state == 3'h3) begin	// @[src/main/scala/npc/dev/Uart.scala:24:28, :28:27, :31:35]
      if (bvalid & io_bready)	// @[src/main/scala/npc/dev/Uart.scala:17:26, :28:27]
        state <= 3'h0;	// @[src/main/scala/npc/dev/Uart.scala:8:7, :24:28]
      else	// @[src/main/scala/npc/dev/Uart.scala:17:26]
        state <= 3'h3;	// @[src/main/scala/npc/dev/Uart.scala:24:28, :28:27]
    end
    else if (state == 3'h2)	// @[src/main/scala/npc/dev/Uart.scala:24:28, :27:27, :31:35]
      state <= {2'h1, wfire};	// @[src/main/scala/npc/dev/Uart.scala:8:7, :16:26, :24:28, :43:24]
    else if (state == 3'h1)	// @[src/main/scala/npc/dev/Uart.scala:8:7, :24:28, :31:35]
      state <= {1'h0, awfire, 1'h1};	// @[src/main/scala/chisel3/util/Mux.scala:126:16, src/main/scala/npc/dev/Uart.scala:15:27, :20:9, :24:28, :42:24]
    else if (|state)	// @[src/main/scala/npc/dev/Uart.scala:24:28, :25:27]
      state <= 3'h0;	// @[src/main/scala/npc/dev/Uart.scala:8:7, :24:28]
    else if (arfire)	// @[src/main/scala/npc/dev/Uart.scala:18:27]
      state <= 3'h4;	// @[src/main/scala/npc/dev/Uart.scala:8:7, :24:28]
    else if (awfire & wfire)	// @[src/main/scala/npc/dev/Uart.scala:15:27, :16:26, :37:19]
      state <= 3'h3;	// @[src/main/scala/npc/dev/Uart.scala:24:28, :28:27]
    else if (wfire)	// @[src/main/scala/npc/dev/Uart.scala:16:26]
      state <= 3'h1;	// @[src/main/scala/npc/dev/Uart.scala:8:7, :24:28]
    else	// @[src/main/scala/npc/dev/Uart.scala:16:26]
      state <= {1'h0, awfire, 1'h0};	// @[src/main/scala/chisel3/util/Mux.scala:126:16, src/main/scala/npc/dev/Uart.scala:15:27, :24:28]
    if (awfire)	// @[src/main/scala/npc/dev/Uart.scala:15:27]
      writeAddr <= io_awaddr;	// @[src/main/scala/npc/dev/Uart.scala:51:35]
    if (wfire) begin	// @[src/main/scala/npc/dev/Uart.scala:16:26]
      writeData <= io_wdata;	// @[src/main/scala/npc/dev/Uart.scala:58:28]
      writeMask <= io_wstrb;	// @[src/main/scala/npc/dev/Uart.scala:59:28]
    end
    if (arfire)	// @[src/main/scala/npc/dev/Uart.scala:18:27]
      readAddr <= io_araddr;	// @[src/main/scala/npc/dev/Uart.scala:78:34]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/scala/npc/dev/Uart.scala:8:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/scala/npc/dev/Uart.scala:8:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/scala/npc/dev/Uart.scala:8:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];	// @[src/main/scala/npc/dev/Uart.scala:8:7]
    initial begin	// @[src/main/scala/npc/dev/Uart.scala:8:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/scala/npc/dev/Uart.scala:8:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/scala/npc/dev/Uart.scala:8:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/scala/npc/dev/Uart.scala:8:7]
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;	// @[src/main/scala/npc/dev/Uart.scala:8:7]
        end	// @[src/main/scala/npc/dev/Uart.scala:8:7]
        state = _RANDOM[2'h0][2:0];	// @[src/main/scala/npc/dev/Uart.scala:8:7, :24:28]
        writeAddr = {_RANDOM[2'h0][31:3], _RANDOM[2'h1][2:0]};	// @[src/main/scala/npc/dev/Uart.scala:8:7, :24:28, :51:35]
        writeData = {_RANDOM[2'h1][31:3], _RANDOM[2'h2][2:0]};	// @[src/main/scala/npc/dev/Uart.scala:8:7, :51:35, :58:28]
        writeMask = _RANDOM[2'h2][6:3];	// @[src/main/scala/npc/dev/Uart.scala:8:7, :58:28, :59:28]
        readAddr = {_RANDOM[2'h2][31:7], _RANDOM[2'h3][6:0]};	// @[src/main/scala/npc/dev/Uart.scala:8:7, :58:28, :78:34]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/scala/npc/dev/Uart.scala:8:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/scala/npc/dev/Uart.scala:8:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_awready = awready;	// @[src/main/scala/npc/dev/Uart.scala:8:7, :50:45]
  assign io_wready = wready;	// @[src/main/scala/npc/dev/Uart.scala:8:7, :57:38]
  assign io_bvalid = bvalid;	// @[src/main/scala/npc/dev/Uart.scala:8:7, :28:27]
  assign io_bresp = _bresp_T_2 ? 2'h0 : {2{bvalid & ~writeValid}};	// @[src/main/scala/chisel3/util/Mux.scala:126:16, src/main/scala/npc/dev/Uart.scala:8:7, :28:27, :63:40, :68:16, :69:{16,19}]
  assign io_arready = ~(|state);	// @[src/main/scala/npc/dev/Uart.scala:8:7, :24:28, :25:27]
  assign io_rvalid = rvalid;	// @[src/main/scala/npc/dev/Uart.scala:8:7, :29:27]
endmodule

